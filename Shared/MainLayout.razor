@inherits LayoutComponentBase
@inject IJSRuntime Js;
@inject NavigationManager UriHelper;
@inject SideBarService SideBarService;
@using allmylinks;

<NavMenu />
<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<RadzenDialog />
<RadzenNotification />
<RadzenContextMenu />
<RadzenTooltip />
<MudAppBar Color="Color.Transparent" Fixed="false">
  <MudPaper Width="10px" Elevation="0">
    <MudNavMenu Rounded="true" Margin="Margin.Dense" Color="Color.Primary" Class="pa-2">
    </MudNavMenu>
  </MudPaper>
  <MudPaper Width="300px" id="menuItems" class="hide">
  </MudPaper>
  <MudSpacer />
  <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" href="https://github.com/MessiDaGod/" title="GitHub" target="_blank" />
</MudAppBar>

  <article class="content">
    @Body
  </article>
  <footer class="footer">
    <div class="container-fluid">
        <div>2022 @@ Shakely Consulting</div>
    </div>
  </footer>


@* <RadzenSidebar @ref="@sidebar0" @bind-Expanded="@sidebarExpanded" class="demos-sidebar">
  <ChildContent>
    <div style="padding: 1rem">
      <RadzenTextBox Placeholder="Find component ..." type="search" @oninput="@FilterPanelMenu" style="width: 100%" />
    </div>
    <RadzenPanelMenu Match="NavLinkMatch.Prefix">
      @if (examples != null)
      {
        @foreach (var category in examples)
        {
          <NavigationItem @bind-Expanded=@category.Expanded Example=@category>
            @if (category.Children != null)
            {
              @foreach (var example in category.Children)
              {
                if (example != null)
                {
                  <NavigationItem Example=@example>
                    @foreach (var child in example.Children)
                    {
                      @if (child.Name.Contains("SqlPage")) {
                        <span class="material-symbols-outlined">database</span>
                      }
                      <NavigationItem Example=@child />
                    }
                  </NavigationItem>
                }
                else
                {
                  <NavigationItem Example=@example />
                }
              }
            }
          </NavigationItem>
        }
      }
    </RadzenPanelMenu>
  </ChildContent>
</RadzenSidebar> *@

<style>
button > #none {
  all: unset;
  cursor: pointer;
}
</style>
@code {

    RadzenSidebar? sidebar0;
    RadzenBody? body0;
    bool sidebarExpanded = true;
    bool bodyExpanded = false;
    bool notExpanded = false;
    bool IsServerSide = true;
    IEnumerable<SideBarItem>? examples;

    [Parameter]
    public string CssClass { get; set; } = "";

    internal IJSObjectReference module0;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        module0 = await Js.InvokeAsync<IJSObjectReference>("import", "./js/Shakely.js");
    }

    protected override async Task OnParametersSetAsync()
    {
    }

    void FilterPanelMenu(ChangeEventArgs args)
    {
        var term = args.Value.ToString();
        examples = SideBarService.Filter(term);
    }
    async Task ChangeTheme(object value)
    {
        var url = await Task.Run(async () => UriHelper.GetUriWithQueryParameter("theme", $"{value.ToString()}"));
        UriHelper.NavigateTo(url, true);
    }
    async Task ChangeDataBase(object value)
    {
        var url = UriHelper.GetUriWithQueryParameter("database", $"{value.ToString()}");
        UriHelper.NavigateTo(url, true);
    }
    public class LoginTypes
    {
        public LoginTypes() { }
        public string Name { get; set; } = null!;
        public string DisplayName { get; set; } = null!;
    }

  internal IJSObjectReference? Module;
  internal IJSObjectReference? module1;
  internal IJSObjectReference? module2;
  internal IJSObjectReference? Module3;

  internal List<string> Pages = new();

    // 1
  protected override async Task OnInitializedAsync()
    {
        examples = SideBarService.Examples;
        await base.OnInitializedAsync();
    }

    protected async Task ToggleMenuItems()
    {
      await Js.InvokeVoidAsync("AML.toggleMenuItems");
    }
}
