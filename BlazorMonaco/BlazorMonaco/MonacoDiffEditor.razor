@inherits MonacoEditorBase
@using Microsoft.JSInterop
@using System.Text.Json
@namespace BlazorMonaco

<div id="@Id" class="monaco-editor-container @CssClass"></div>

@code {

    public override void Dispose()
    {
        OriginalEditor?.Dispose();
        ModifiedEditor?.Dispose();
        base.Dispose();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Get options
            var options = ConstructionOptions?.Invoke(this);

            // Prepare the line numbers callback
            LineNumbersLambda = options.LineNumbersLambda;
            if (LineNumbersLambda != null)
            {
                options.LineNumbers = "function";
                options.LineNumbersLambda = null;
            }

            // Create the editor
            await MonacoDiffEditor.CreateDiffEditor(Id, options, jsObjectRef);

            // Create the bridges for the inner editors
#pragma warning disable BL0005
            OriginalEditor = MonacoEditor.CreateVirtualEditor(Id + "_original");
            OriginalEditor.OnDidCompositionEnd = OnDidCompositionEndOriginal;
            OriginalEditor.OnDidCompositionStart = OnDidCompositionStartOriginal;
            OriginalEditor.OnContextMenu = OnContextMenuOriginal;
            OriginalEditor.OnDidBlurEditorText = OnDidBlurEditorTextOriginal;
            OriginalEditor.OnDidBlurEditorWidget = OnDidBlurEditorWidgetOriginal;
            OriginalEditor.OnDidChangeConfiguration = OnDidChangeConfigurationOriginal;
            OriginalEditor.OnDidChangeCursorPosition = OnDidChangeCursorPositionOriginal;
            OriginalEditor.OnDidChangeCursorSelection = OnDidChangeCursorSelectionOriginal;
            OriginalEditor.OnDidChangeModel = OnDidChangeModelOriginal;
            OriginalEditor.OnDidChangeModelContent = OnDidChangeModelContentOriginal;
            OriginalEditor.OnDidChangeModelDecorations = OnDidChangeModelDecorationsOriginal;
            OriginalEditor.OnDidChangeModelLanguage = OnDidChangeModelLanguageOriginal;
            OriginalEditor.OnDidChangeModelLanguageConfiguration = OnDidChangeModelLanguageConfigurationOriginal;
            OriginalEditor.OnDidChangeModelOptions = OnDidChangeModelOptionsOriginal;
            OriginalEditor.OnDidContentSizeChange = OnDidContentSizeChangeOriginal;
            OriginalEditor.OnDidDispose = OnDidDisposeOriginal;
            OriginalEditor.OnDidFocusEditorText = OnDidFocusEditorTextOriginal;
            OriginalEditor.OnDidFocusEditorWidget = OnDidFocusEditorWidgetOriginal;
            OriginalEditor.OnDidInit = OnDidInitOriginal;
            OriginalEditor.OnDidLayoutChange = OnDidLayoutChangeOriginal;
            OriginalEditor.OnDidPaste = OnDidPasteOriginal;
            OriginalEditor.OnDidScrollChange = OnDidScrollChangeOriginal;
            OriginalEditor.OnKeyDown = OnKeyDownOriginal;
            OriginalEditor.OnKeyUp = OnKeyUpOriginal;
            OriginalEditor.OnMouseDown = OnMouseDownOriginal;
            OriginalEditor.OnMouseLeave = OnMouseLeaveOriginal;
            OriginalEditor.OnMouseMove = OnMouseMoveOriginal;
            OriginalEditor.OnMouseUp = OnMouseUpOriginal;
            await OriginalEditor.SetEventListeners();
            await OriginalEditor.OnDidInit.InvokeAsync(OriginalEditor);

            ModifiedEditor = MonacoEditor.CreateVirtualEditor(Id + "_modified");
            ModifiedEditor.OnDidCompositionEnd = OnDidCompositionEndModified;
            ModifiedEditor.OnDidCompositionStart = OnDidCompositionStartModified;
            ModifiedEditor.OnContextMenu = OnContextMenuModified;
            ModifiedEditor.OnDidBlurEditorText = OnDidBlurEditorTextModified;
            ModifiedEditor.OnDidBlurEditorWidget = OnDidBlurEditorWidgetModified;
            ModifiedEditor.OnDidChangeConfiguration = OnDidChangeConfigurationModified;
            ModifiedEditor.OnDidChangeCursorPosition = OnDidChangeCursorPositionModified;
            ModifiedEditor.OnDidChangeCursorSelection = OnDidChangeCursorSelectionModified;
            ModifiedEditor.OnDidChangeModel = OnDidChangeModelModified;
            ModifiedEditor.OnDidChangeModelContent = OnDidChangeModelContentModified;
            ModifiedEditor.OnDidChangeModelDecorations = OnDidChangeModelDecorationsModified;
            ModifiedEditor.OnDidChangeModelLanguage = OnDidChangeModelLanguageModified;
            ModifiedEditor.OnDidChangeModelLanguageConfiguration = OnDidChangeModelLanguageConfigurationModified;
            ModifiedEditor.OnDidChangeModelOptions = OnDidChangeModelOptionsModified;
            ModifiedEditor.OnDidContentSizeChange = OnDidContentSizeChangeModified;
            ModifiedEditor.OnDidDispose = OnDidDisposeModified;
            ModifiedEditor.OnDidFocusEditorText = OnDidFocusEditorTextModified;
            ModifiedEditor.OnDidFocusEditorWidget = OnDidFocusEditorWidgetModified;
            ModifiedEditor.OnDidInit = OnDidInitModified;
            ModifiedEditor.OnDidLayoutChange = OnDidLayoutChangeModified;
            ModifiedEditor.OnDidPaste = OnDidPasteModified;
            ModifiedEditor.OnDidScrollChange = OnDidScrollChangeModified;
            ModifiedEditor.OnKeyDown = OnKeyDownModified;
            ModifiedEditor.OnKeyUp = OnKeyUpModified;
            ModifiedEditor.OnMouseDown = OnMouseDownModified;
            ModifiedEditor.OnMouseLeave = OnMouseLeaveModified;
            ModifiedEditor.OnMouseMove = OnMouseMoveModified;
            ModifiedEditor.OnMouseUp = OnMouseUpModified;
            await ModifiedEditor.SetEventListeners();
            await ModifiedEditor.OnDidInit.InvokeAsync(ModifiedEditor);
#pragma warning restore BL0005
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    internal override async Task SetEventListeners()
    {
        if (OnDidUpdateDiff.HasDelegate)
            await SetEventListener("OnDidUpdateDiff");
        await base.SetEventListeners();
    }

    [JSInvokable]
    public override async Task EventCallback(string eventName, string eventJson)
    {
        var jsonOptions = new JsonSerializerOptions { PropertyNamingPolicy = JsonNamingPolicy.CamelCase };

        switch (eventName)
        {
            case "OnDidUpdateDiff": await OnDidUpdateDiff.InvokeAsync(this); break;
        }
        await base.EventCallback(eventName, eventJson);
    }

    #region Instance Methods

    // getDiffLineInformationForModified

    // getDiffLineInformationForOriginal

    // getLineChanges

    public async Task<DiffEditorModel> GetModel()
    {
        if (jsRuntime == null)
            return default;
        return await jsRuntime.InvokeAsync<DiffEditorModel>("blazorMonaco.editor.getInstanceDiffModel", Id);
    }

    // restoreViewState

    // saveViewState

    public async Task SetModel(DiffEditorModel model)
    {
        if (jsRuntime == null)
            return;
        await jsRuntime.InvokeVoidAsync("blazorMonaco.editor.setInstanceDiffModel", Id, model);
    }

    // updateOptions

    #endregion
}
