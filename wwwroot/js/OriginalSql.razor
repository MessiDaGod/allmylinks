@page "/original"
@inject IJSRuntime Js;
@using MudBlazor;
@namespace allmylinks

<div class='container-fluid'>
    <div class='row'>
			<div id='infoPanel' class="card rounded-0 border-left-0">
				<table class='table table-condensed small'>
					<thead>
						<tr>
							<td colspan='2'>
								<InputFile id="upload" OnChange="UploadFiles" hidden multiple />
								<MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Filled.CloudUpload" for="upload">
									Upload Database
								</MudButton>
								@if (files != null)
									{
										<MudText Typo="@Typo.h6">@files.Count() File@(files.Count() == 1 ? "" : "s"):</MudText>
										<MudList>
											@foreach (var file in files)
											{
												<MudListItem Icon="@Icons.Filled.AttachFile" @key="@file">
													@file.Name <code>@file.Size bytes</code>
												</MudListItem>
											}
										</MudList>
									}
									<hr class='invisible-divider'>
									<span class='text-muted'>¬© Copyright <span id='copyrightYearDisplay'></span> by <a href='https://github.com/MessiDaGod/' target='_blank'>Joe Shakely</a> </span>
								</td>
							</tr>
						</thead>
						<tbody id='dbTableDetails'></tbody>
					</table>
				</div>
			</div>
        <div class='col-sm-8 pl-0'>
            <div id='mainTabsWrapper' class='card rounded-0 border-right-0'>
                <ul id='mainTabs' class='nav nav-tabs' role='tablist'>
                    <li class='nav-item'>
                        <a class='nav-link rounded-0 active' id='browse-tab' href='#browse' data-bs-toggle='tab' data-height='true' aria-controls='browse' aria-selected='true' role='tab'><small>üîé Browse Data</small></a>
                    </li>
                    <li class='nav-item'>
                        <a class='nav-link rounded-0' id='editor-tab' href='#editor' data-bs-toggle='tab' data-height='true' aria-controls='editor' aria-selected='true' role='tab'><small>‚ùÆ‚ÅÑ‚ùØ Query Editor</small></a>
                    </li>
                    <li class='nav-item'>
                        <a class='nav-link rounded-0' id='logs-tab' href='#logs' data-bs-toggle='tab' data-height='true' aria-controls='logs' aria-selected='true' role='tab'><small>üìù Output Logs</small></a>
                    </li>
                </ul>
                <div class='card-body tab-content'>
                    <p id='errorDisplay' class='m-0 p-0 small text-danger'></p>
                    <div id='browse' role='tabpanel' class='tab-pane fade active show' aria-labelledby='browse-tab'>
                        <div class='btn-group btn-group-sm m-0'>
                            <div class='btn-group btn-group-sm'>
                                <button id='exportToggleBtn' type='button' class='btn btn-sm btn-light text-info border-info dropdown-toggle rounded-0' data-toggle='dropdown'><small>üíæ Save‚Ä¶</small></button>
                                <div class='dropdown-menu'>
                                    <button id='exportAsJSON' type='button' class='dropdown-item'><small>üíΩ Export datatable as JSON</small></button>
                                </div>
                            </div>
                            <small id='tableDetails' class='ml-2'></small>
                        </div>
                        <hr class='invisible-divider'>
                        <div id='tableRecords' class='table-responsive'></div>
                        <hr class='invisible-divider'>
                        <ul id='tablePagination' class='pagination pagination-sm rounded-0'></ul>
                    </div>
                    <div id='editor' role='tabpanel' class='tab-pane fade show' aria-labelledby='editor-tab'>
                        <div class='btn-group btn-group-sm m-0'>
                            <div class='btn-group btn-group-sm'>
                                <button id='exportQueryToggleBtn' type='button' class='btn btn-sm btn-light text-info border-info dropdown-toggle rounded-0' data-toggle='dropdown'><small>üíæ Save‚Ä¶</small></button>
                                <div class='dropdown-menu'>
                                    <button id='exportQueryAsJSON' type='button' class='dropdown-item'><small>üíΩ Export resultset as JSON</small></button>
                                    <button id='exportEditorQuery' type='button' class='dropdown-item'><small>üìÑ Export SQL query to local file</small></button>
                                </div>
                            </div>
                            <button id='runQueryBtn' type='button' class='btn btn-sm btn-light text-primary border-primary rounded-0 ml-2'><small>Run ‚Øà</small></button>
                            <small id='tableQueryDetails' class='ml-2'></small>
                        </div>
                        <hr class='invisible-divider'>
                        <p class='mb-0'><textarea id='lineCounter' wrap='off' readonly>1.</textarea><textarea id='codeEditor' wrap='off'></textarea></p>
                        <div id='tableQueryRecords' class='table-responsive'></div>
                        <hr class='invisible-divider'>
                        <ul id='tableQueryPagination' class='pagination pagination-sm rounded-0'></ul>
                    </div>
                    <div id='logs' role='tabpanel' class='tab-pane fade show' aria-labelledby='logs-tab'>
                        <hr class='invisible-divider'>
                        <div id='logsRecords' class='table-responsive'></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

@code {
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }
    @* protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InvokeAsync(StateHasChanged);
        }
    } *@

	IList<IBrowserFile> files = new List<IBrowserFile>();
	private async Task UploadFiles(InputFileChangeEventArgs e)
	{
		for (int i = 0; i < e.GetMultipleFiles().Count; i++)
		{
			var file = e.GetMultipleFiles()[i];
			await Task.Run(() => files.Add(file));
		}
	}
}