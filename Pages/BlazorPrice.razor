@page "/BlazorPrices"
@inject IJSRuntime Js;
@namespace allmylinks
@inject NavigationManager UriHelper;

@if (Prices == null)
{
        <div id="infomsg" class="center">
            <MudAlert Severity="Severity.Info" ContentAlignment="HorizontalAlignment.Center" ShowCloseIcon="true" CloseIconClicked="(() => CloseMe(false))">Please Upload the .db file to see this page.</MudAlert>
            </div>
            <SqlPage />
}
@if (Prices != null) {
<RadzenDataGrid @ref="_PricesGrid" AllowFiltering="true" AllowColumnResize="true" AllowVirtualization="true" Style="height:700px" FilterMode="FilterMode.Advanced" AllowSorting="true" Data="@Prices.ToList().AsEnumerable()" TItem="Prices" ColumnWidth="100px" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" PagerHorizontalAlign="HorizontalAlign.Left" LogicalFilterOperator="LogicalFilterOperator.Or" AllowRowSelectOnRowClick="@AllowRowSelectOnRowClick" SelectionMode="DataGridSelectionMode.Multiple">
    <Columns>
        <RadzenDataGridColumn TItem="Prices" Property="Symbol" Title="Symbol" Sortable="true" Filterable="true">
            <Template Context="Prices">
                @if (Conv.ConvertTo(Prices.Symbol).Type == SymbolType.Stock || Prices.Symbol == "BTC-USD")
                {
                    <a href="@(String.Concat("JavaScript:Shakely.openNewWindow('", "https://finance.yahoo.com/quote/", Prices.Symbol, "/", "')"))">@(Prices.Symbol)</a>
                }
                else
                {
                    @Prices.Symbol
                }
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Prices" Property="Open" Title="Open" FormatString="{0:C}" />
        <RadzenDataGridColumn TItem="Prices" Property="High" Title="High" FormatString="{0:C}" />
        <RadzenDataGridColumn TItem="Prices" Property="Low" Title="Low" FormatString="{0:C}" />
        <RadzenDataGridColumn TItem="Prices" Property="AdjustedClose" Title="Adj. Close" FormatString="{0:C}" />
        <RadzenDataGridColumn TItem="Prices" Property="Close" Title="Close" FormatString="{0:C}" />
        <RadzenDataGridColumn TItem="Prices" Property="Volume" Title="Volume" FormatString="{0:N0}" />
        <RadzenDataGridColumn TItem="Prices" Property="Pct_Change" Title="% Change">
            <Template Context="Prices">
                <span style="color: black; font-weight: 700">@Prices.Pct_Change.ToString("N4")</span>
                @if (Prices.Pct_Change < 0)
                {
                    <RadzenImage Path="@UriHelper.ToAbsoluteUri("img/down.png").ToString()" style="width: 10px; height: 10px; border-radius: 0px;" />
                }
                @if (Prices.Pct_Change > 0)
                {
                    <RadzenImage Path="@UriHelper.ToAbsoluteUri("img/up.png").ToString()" style="width: 10px; height: 10px; border-radius: 0px;" />
                }
                @if (Prices.Pct_Change == 0)
                {
                    <RadzenImage Path="@UriHelper.ToAbsoluteUri("img/arrowleftright.png").ToString()" style="width: 10px; height: 10px; border-radius: 0px;" />
                }
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>
}

@code {

    IEnumerable<SymbolField> symbols => SymbolField.Symbols;
    private SymbolField Conv { get; set; } = new();
    private bool AllowRowSelectOnRowClick { get; set; } = true;
    private IEnumerable<Prices> Prices { get; set; }
    private TabPosition _tabPosition = TabPosition.Left;
    private RadzenDataGrid<Prices> _PricesGrid;
    RadzenDataGrid<Prices> _grid;

    protected override async Task OnInitializedAsync()
    {
        var result = await Js.InvokeAsync<Prices[]>("Sql.getPrices");
        List<Prices> pricesList = new();
        if (result != null) {
        for (int i = 0; i < result.Length; i++)
        {
            pricesList.Add(result[i]);
        }
        Prices = pricesList.AsEnumerable();
        await InvokeAsync(StateHasChanged);
        }
    }

    private bool showCallAlert = true;
    private bool showLeaveAlert;

    private void CloseMe(bool value)
    {
        if (value)
        {
            showLeaveAlert = false;
        }
        else
        {
            showCallAlert = false;
        }
    }
}