@page "/browse-data"
@using Radzen;
@using Stl.Fusion.Authentication;
@using System.Data;
@using Stl.Fusion
@using Stl.Fusion.Blazor;
@inject IJSRuntime Js;
@inject Session _session;
@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper;
@inject Stl.Fusion.UI.UICommander _uiCommandRunner;
@inject ILogger<BrowseData> Log;
@inject ISqlService SqlService;
@inherits MixedStateComponent<BrowseData.Model, BrowseData.LocalModel>;
@namespace allmylinks

@{
    var locals = MutableState.Value;
    var state = State.LatestNonErrorValue;
    var user = new User("guest");
    var usedAuthSchemas = user.Identities.Select(kv => kv.Key.Schema).ToHashSet();
    var unusedAuthSchemas = AuthSchemas.Where(p => !usedAuthSchemas.Contains(p.Name)).ToArray();
    var error = State.Error;
}

<!--suppress SpellCheckingInspection -->
<div class="mud-tabs-toolbar-wrapper" style="transform:translateX(-0px);">
    <ul class="nav nav-tabs" id="myTab" role="tablist">
        <li class="nav-item" role="presentation">
            <button onclick="AML.colorizes" class="nav-link active" id="browsedata-tab" data-bs-toggle="tab" data-bs-target="#browsedata" type="button" role="tab" aria-controls="browsedata" aria-selected="true"><span class="material-symbols-outlined">search</span>Browse Data</button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="queryeditor-tab" data-bs-toggle="tab" data-bs-target="#queryeditor" type="button" role="tab" aria-controls="queryeditor" aria-selected="false">❮⁄❯ Query Editor</button>
        </li>
    </ul>
    <div class="tab-content" id="myTabContent">
        <div class="tab-pane fade show active" id="browsedata" role="tabpanel" aria-labelledby="browsedata-tab">
            <div class="btn-group btn-group-sm">
                <div class="btn-group">
                    <button class="btn btn-primary btn-md dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                        <span class="material-symbols-outlined">save</span>&nbsp;Save Results
                    </button>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" onclick="Sql.resultsJson()"><span class="material-symbols-outlined">file_download</span> JSON</a></li>
                        <li><a class="dropdown-item" onclick="Sql.resultsJson('codeEditor')"><span class="material-symbols-outlined">file_download</span> Excel</a></li>
                    </ul>
                </div>
            </div>
            <hr class="invisible-divider">
            <small id="tableDetails" class="ml-2"></small>
            <hr class="invisible-divider">
            <div id="tableRecords" class="table-responsive"></div>
            <hr class="invisible-divider">
            <ul id="tablePagination" class="pagination pagination-sm rounded-0"></ul>
        </div>
        <div class="tab-pane fade" id="queryeditor" role="tabpanel" aria-labelledby="queryeditor-tab">
            <div class="btn-group btn-group-sm">
                <div class="btn-group">
                    <button class="btn btn-primary btn-md dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                        <span class="material-symbols-outlined">save</span>&nbsp;Save Results
                    </button>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" onclick="Sql.resultsJson('codeEditor')"><span class="material-symbols-outlined">file_download</span> JSON</a></li>
                        <li><a class="dropdown-item" onclick="Sql.resultsJson('codeEditor')"><span class="material-symbols-outlined">file_download</span> Excel</a></li>
                    </ul>
                </div>
            </div>
            <button id="runQueryBtn" type="button" class="btn btn-sm btn-light text-primary border-primary rounded-0 ml-2" onclick="Sql.initRunQuery()">Execute Query<span class="material-symbols-outlined">database</span>
            </button>
            <button id="formatsql" type="button" class="btn btn-sm btn-light text-primary border-primary rounded-0 ml-2" @onclick=SetValue>Format SQL<span class="material-symbols-outlined">database</span>
            </button>
            @* <button id="toggleHelloworld" type="button" class="btn btn-sm btn-light text-primary border-primary rounded-0 ml-2" onclick="Sql.toggleHelloWorld()">Toggle Hello World<span class="material-symbols-outlined">database</span></button> *@
            <button id="clear" type="button" class="btn btn-sm btn-light text-primary border-primary rounded-0 ml-2" @onclick="Clear">Clear<span class="material-symbols-outlined">database</span></button>
            <small id="tableQueryDetails" class="ml-2"></small>
            <button id="toggleFormat" type="button" class="btn btn-sm btn-light text-primary border-primary rounded-0 ml-2" @onclick="Reset">Reset Value<span class="material-symbols-outlined">database</span></button>
            <hr class="invisible-divider">
            @if (UseNewVersion) {
                <MonacoEditor @ref="_editor" Id="codeEditor" ConstructionOptions="EditorConstructionOptions"></MonacoEditor>
                <SqlFormatter />
            }
            @if (!UseNewVersion) {
                <allmylinks.Pages.SqlFormat />
                <MonacoEditor @ref="_editor" Id="codeEditor" ConstructionOptions="EditorConstructionOptions"></MonacoEditor>
            }

            <small id="tableQueryDetails" class="ml-2"></small>
            <div id="helloworld"></div>
            <div id="tableQueryRecords" class="decorationsOverviewRuler"></div>
        </div>
    </div>
</div>
<style>
    .blue {
        color: blue !important;
    }
    .tab-pane {
        overflow-y: scroll !important;
        overflow-x: scroll !important;
    }
    #queryeditor, #myTabContent, .mud-layout {
        overflow-y: scroll !important;
        overflow-x: scroll !important;
    }
    #tableQueryRecords {
        overflow-x: scroll !important;
        overflow-y: scroll !important;
    }
    th {
        min-width: auto !important;
    }
    #outputDiv, #codeEditor,  #outputDiv2, #codeEditor2 {
        height:70vh; padding: 2px; border: 1px solid; overflow: scroll;
    }
    .hide {
        display: none !important;
    }
</style>

@code {

    private bool UseNewVersion = true;
    private MonacoEditor _editor { get; set; }

    public class Model
    {
        public string Text { get; set; } = string.Empty;

        public Model(string text)
        {
            Text = text;
        }
    }
    public class LocalModel : BrowseData
    {
        private string _text = "";
        public string MyText
        {
            get => _text;
            set
            {
                if (_text == value)
                    return;
                _text = value;
            }
        }
    }

    private (string Name, string DisplayName)[] AuthSchemas { get; set; } = Array.Empty<(string, string)>();
    private bool showCallAlert = true;
    private bool showLeaveAlert = false;
    IEnumerable<SymbolField> symbols => SymbolField.Symbols;
    private SymbolField Conv { get; set; } = new();
    private bool AllowRowSelectOnRowClick { get; set; } = true;
    private IEnumerable<Prices> Prices { get; set; }
    private TabPosition _tabPosition = TabPosition.Left;
    private RadzenDataGrid<Prices>? _PricesGrid;
    RadzenDataGrid<Prices>? _grid;

    [Parameter]
    public Task<AuthState> AuthStateTask { get; set; } = null!;

    public class DatabaseTables
    {
        public object[]? columns { get; set; }
        public object[]? values { get; set; }
    }

    public IEnumerable<Person?>? Persons;
    public static string TableNameFromJS { get; set; } = string.Empty;
    public static string JSON { get; set; } = string.Empty;
    public string[]? columns { get; set; }

    bool allowRowSelectOnRowClick = true;
    bool isLoading = false;
    protected static IJSRuntime staticJsRuntime { get; set; }
    protected DotNetObjectReference<BrowseData> jsObjectRef { get; set; }
    bool FirstRender { get; set; } = true;
    public string MyText { get; private set; }
    private static string InitialValue { get { return @"SELECT tr.hMy Id , tr.hParent2 BatchId , tr.hPerson PersonId , tr.uRef InvoiceNumber, tr.itype2 DisplayType, tr.hOffsetAcct CashAccountId , tr.hAccrualAcct ApAccountId, tr.uPostDate PostMonth,isnull(PHATrans.sPmtType,'') PHAType  ,tr.hRemittanceVendor RemittanceVendorId, case when isnull(tr.bACH,0) = -1 and isnull(tr.CashReceipt,0) = 0 then 1 else isnull(tr.CashReceipt,0) end PaymentMethod  FROM trans tr  LEFT JOIN trans_int tri on tri.htran = tr.hmy left join H8PRHTrans PHATrans on (PHATrans.hTran = tr.hmy)  WHERE tr.hMy = 300330533"; } }

    protected override async Task OnInitializedAsync()
    {
        staticJsRuntime = Js;
        jsObjectRef = DotNetObjectReference.Create(this);

        await base.OnInitializedAsync();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Run(() => isLoading = false);
            await Init();
            await InvokeAsync(StateHasChanged);
            return;
        }
        FirstRender = false;
        return;
    }

    internal IJSObjectReference module0;

    async Task InitMonaco()
    {
        var model = new TextModel
        {
            Id = "sql"
        };
        await MonacoEditorBase.SetModelLanguage(model, "sql");
    }

    private async Task Reset()
    {
        await _editor.SetValue(InitialValue);
    }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(MonacoEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
            Language = "sql",
            Value = InitialValue,
        };
    }

    async Task LoadGrid(CancellationToken ct = default)
    {
        bool isBrowseDataActive = false;
        isBrowseDataActive = await Js.InvokeAsync<bool>("AML.isBrowseDataActive", ct).ConfigureAwait(false);
        await Js.InvokeVoidAsync("AML.logit", ct, isBrowseDataActive ? "true" : "false", ct).ConfigureAwait(false);
        if (isBrowseDataActive)
            await Js.InvokeVoidAsync("Sql.initGrid", ct).ConfigureAwait(false);
    }

    private async Task LogIt(string message)
    {
        await Js.InvokeVoidAsync("AML.logit", message);
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
    }

    protected async Task Init()
    {
        await Js.InvokeVoidAsync("Sql.init");
    }

    protected async Task InitRunQuery()
    {
        await Js.InvokeVoidAsync("Sql.initRunQuery");
    }

    IList<IBrowserFile> files = new List<IBrowserFile>();

    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        if (!e.GetMultipleFiles()[0].Name.ToLower().Contains(".db"))
        {
            await Js.InvokeVoidAsync("AML.logit", "File is not a valid SQLite database");
            showLeaveAlert = true;
            await InvokeAsync(StateHasChanged);
            return;
        }
        for (int i = 0; i < e.GetMultipleFiles().Count; i++)
        {
            var file = e.GetMultipleFiles()[i];
            await Js.InvokeVoidAsync("AML.logit", $"Adding file {i + 1}");
            await Task.Run(() => files.Add(file));
            await Js.InvokeVoidAsync("AML.logit", files[0].Name);
        }
        await Js.InvokeVoidAsync("Sql.toggleTabs");
        await Js.InvokeVoidAsync("Sql.toggleMsg");
        @* await Init(); *@
        var result = await Js.InvokeAsync<Prices[]>("Sql.getPrices");
        List<Prices> pricesList = new();
        if (result != null)
        {
            for (int i = 0; i < result.Length; i++)
            {
                if (i >= 0 && i < 11)
                    await Js.InvokeVoidAsync("AML.logit", $"sql blazor loading row {i}");
                pricesList.Add(result[i]);
            }
            Prices = pricesList.AsEnumerable();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task Clear()
    {
        await _editor.SetValue(string.Empty);
        await Js.InvokeVoidAsync("AML.clear");
    }

    private void CloseMe(bool value)
    {
        if (value)
        {
            showLeaveAlert = false;
        }
        else
        {
            showCallAlert = false;
        }
    }

    private void ShowAlerts()
    {
        showCallAlert = true;
        showLeaveAlert = true;
    }

    void OnCollapse(RadzenSplitterEventArgs args)
    {
    }

    void OnExpand(RadzenSplitterEventArgs args)
    {
    }

    void OnResize(RadzenSplitterResizeEventArgs args)
    {

    }

    void OnCollapseDisabled(RadzenSplitterEventArgs args)
    {
        args.Cancel = true;

    }

    void OnResizeDisabled(RadzenSplitterResizeEventArgs args)
    {
        args.Cancel = true;

    }

    private async Task SetValue()
    {
        await CopyMonacoToInput();
        await Post();
    }

    private async Task CopyMonacoToInput()
    {
        await Js.InvokeVoidAsync("AML.setInputStringValue", UseNewVersion);
        MyText = await Js.InvokeAsync<string>("AML.getFormattedText");
        await Js.InvokeVoidAsync("AML.logit", "Copying Monaco to Input");
        await Task.Run(() => MutableState.Invalidate()).ConfigureAwait(false);
    }

    protected override async Task<Model> ComputeState(CancellationToken cancellationToken)
    {
        var model = new Model(MyText);
        await Js.InvokeVoidAsync("AML.logit", "Formatted through ComputeState.");
        await Post();
        return model;
    }

    private async Task Post()
    {
        await _editor.SetValue(MyText);
        var (_, ce) = await _uiCommandRunner.Run(new SqlService.PostCommand(MyText, _session));
        if (ce == null)
            return;

        await Js.InvokeVoidAsync("AML.logit", "Invalidating...");
        await MutableState.Recompute();
        MutableState.Invalidate();
    }
}
