@page "/browse-data"
@using MudBlazor;
@using allmylinks.Models;
@using Newtonsoft.Json;
@using BlazorMonaco;
@using Radzen
@using Radzen.Blazor
@inject IJSRuntime Js;
@inject NavigationManager UriHelper;
@namespace allmylinks

<!--suppress SpellCheckingInspection -->
<div class="mud-tabs-toolbar-wrapper" style="transform:translateX(-0px);">
    <ul class="nav nav-tabs" id="myTab" role="tablist">
        <li class="nav-item" role="presentation">
            <button onclick="AML.colorizes" class="nav-link active" id="browsedata-tab" data-bs-toggle="tab" data-bs-target="#browsedata" type="button" role="tab" aria-controls="browsedata" aria-selected="true"><span class="material-symbols-outlined">search</span>Browse Data</button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="queryeditor-tab" data-bs-toggle="tab" data-bs-target="#queryeditor" type="button" role="tab" aria-controls="queryeditor" aria-selected="false">❮⁄❯ Query Editor</button>
        </li>
    </ul>
    <div class="tab-content" id="myTabContent">
        <div class="tab-pane fade show active" id="browsedata" role="tabpanel" aria-labelledby="browsedata-tab">
            <div class="btn-group btn-group-sm">
                <div class="btn-group">
                    <button class="btn btn-primary btn-md dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                        <span class="material-symbols-outlined">save</span>&nbsp;Save Results
                    </button>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" onclick="Sql.resultsJson()"><span class="material-symbols-outlined">file_download</span> JSON</a></li>
                        <li><a class="dropdown-item" onclick="Sql.resultsJson('codeEditor')"><span class="material-symbols-outlined">file_download</span> Excel</a></li>
                    </ul>
                </div>
            </div>
            <hr class="invisible-divider">
            <small id="tableDetails" class="ml-2"></small>
            <hr class="invisible-divider">
            <div id="tableRecords" class="table-responsive"></div>
            <hr class="invisible-divider">
            <ul id="tablePagination" class="pagination pagination-sm rounded-0"></ul>
        </div>
        <div class="tab-pane fade" id="queryeditor" role="tabpanel" aria-labelledby="queryeditor-tab">
            <div class="btn-group btn-group-sm">
                <div class="btn-group">
                    <button class="btn btn-primary btn-md dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                        <span class="material-symbols-outlined">save</span>&nbsp;Save Results
                    </button>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" onclick="Sql.resultsJson('codeEditor')"><span class="material-symbols-outlined">file_download</span> JSON</a></li>
                        <li><a class="dropdown-item" onclick="Sql.resultsJson('codeEditor')"><span class="material-symbols-outlined">file_download</span> Excel</a></li>
                    </ul>
                </div>
            </div>
            <button id="runQueryBtn" type="button" class="btn btn-sm btn-light text-primary border-primary rounded-0 ml-2" onclick="Sql.initRunQuery()">Execute Query<span class="material-symbols-outlined">database</span>
            </button>
            <small id="tableQueryDetails" class="ml-2"></small>
            <hr class="invisible-divider">
            <p class="mb-0">

            <MonacoEditor Id="codeEditor" ConstructionOptions="EditorConstructionOptions" />
            <textarea id="codeEditor2" wrap="off" class="hide"></textarea>
            </p>
            <div id="tableQueryRecords" class="table-responsive"></div>
        </div>
    </div>
    <div class="mud-tab-slider mud-tab-slider-horizontal" style="width:0px;left:0px;transition:left .3s cubic-bezier(.64,.09,.08,1);"></div>
</div>

<style>
    .blue {
    color: blue !important;
    }
    .tab-pane {
        overflow-y: scroll;
    }
</style>

@code {

    private bool showCallAlert = true;
    private bool showLeaveAlert = false;
    IEnumerable<SymbolField> symbols => SymbolField.Symbols;
    private SymbolField Conv { get; set; } = new();
    private bool AllowRowSelectOnRowClick { get; set; } = true;
    private IEnumerable<Prices> Prices { get; set; }
    private Radzen.TabPosition _tabPosition = Radzen.TabPosition.Left;
    private RadzenDataGrid<Prices> _PricesGrid;
    RadzenDataGrid<Prices> _grid;

    public class DatabaseTables
    {
        public DatabaseTables() { }
        public object[] columns { get; set; } = null!;
        public object[] values { get; set; } = null!;
    }

    [Inject] IJSRuntime JS { get; set; }
    public IEnumerable<Person?>? Persons;
    public static string TableNameFromJS { get; set; } = string.Empty;
    public static string JSON { get; set; } = string.Empty;

    private RadzenDataGrid<Person>? PersonsGrid;

    public string[]? columns { get; set; }

    bool allowRowSelectOnRowClick = true;
    bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Run(() => isLoading = false);
            await Init();
            await LoadGrid();
            await Js.InvokeVoidAsync("AML.colorize");
            await InvokeAsync(StateHasChanged);
        }
    }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(MonacoEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
            Language = "javascript",
            Value = "SELECT * FROM Prices LIMIT 1",
        };
    }

    async Task LoadGrid(CancellationToken ct = default)
    {
        bool isBrowseDataActive = false;
        isBrowseDataActive = await JS.InvokeAsync<bool>("AML.isBrowseDataActive");
        await Js.InvokeVoidAsync("AML.logit", isBrowseDataActive ? "true" : "false");
        if (isBrowseDataActive)
        await JS.InvokeVoidAsync("Sql.initGrid");
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
    }

    @* public async Task<object[]?>? GetColumns(string tableName)
        {
        columns = await Js.InvokeAsync<string[]>("Sql.getColumns", tableName);
        for (int i = 0; i < columns.Length; i++)
        {
        await Task.Run(() => Console.WriteLine(columns[i].ToString())).ConfigureAwait(false);
        }
        return columns;
        } *@

    protected async Task Init()
    {
        await Js.InvokeVoidAsync("Sql.initGrid");
        await Js.InvokeVoidAsync("Sql.init");
    }

    public async Task LoadTables(string json)
    {
        if (TableNameFromJS == "Prices")
        {
            Prices[]? prices = JsonConvert.DeserializeObject<Prices[]>(json);
            for (int j = 0; j < prices.Length; j++)
            {
                await LogIt(prices[j].Close.ToString());
            }
            return;
        }
    }

    public async Task LogIt(string message)
    {
        await Js.InvokeAsync<string>("AML.logit", message);
    }


    protected async Task InitRunQuery()
    {
        await Js.InvokeVoidAsync("Sql.initRunQuery");
    }

    IList<IBrowserFile> files = new List<IBrowserFile>();

    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        if (!e.GetMultipleFiles()[0].Name.ToString().ToLower().Contains(".db"))
        {
            await Js.InvokeVoidAsync("AML.logit", "File is not a valid SQLite database");
            showLeaveAlert = true;
            await InvokeAsync(StateHasChanged);
            return;
        }
        for (int i = 0; i < e.GetMultipleFiles().Count; i++)
        {
            var file = e.GetMultipleFiles()[i];
            await Js.InvokeVoidAsync("AML.logit", $"Adding file {i + 1}");
            await Task.Run(() => files.Add(file));
            await Js.InvokeVoidAsync("AML.logit", files[0].Name.ToString());
        }
        await Js.InvokeVoidAsync("Sql.toggleTabs");
        await Js.InvokeVoidAsync("Sql.toggleMsg");
        await Init();
        var result = await Js.InvokeAsync<Prices[]>("Sql.getPrices");
        List<Prices> pricesList = new();
        if (result != null)
        {
            for (int i = 0; i < result.Length; i++)
            {
                if (i >= 0 && i < 11)
                    await Js.InvokeVoidAsync("AML.logit", $"sql blazor loading row {i}");
                pricesList.Add(result[i]);
            }
            Prices = pricesList.AsEnumerable();
            await InvokeAsync(StateHasChanged);
        }
    }


    private void CloseMe(bool value)
    {
        if (value)
        {
            showLeaveAlert = false;
        }
        else
        {
            showCallAlert = false;
        }
    }

    private void ShowAlerts()
    {
        showCallAlert = true;
        showLeaveAlert = true;
    }

    [JSInvokable]
    async Task UpdateQueryColor()
    {
        await Js.InvokeVoidAsync("AML.colorize");
    }

    void OnCollapse(RadzenSplitterEventArgs args)
    {
    }

    void OnExpand(RadzenSplitterEventArgs args)
    {
    }

    void OnResize(RadzenSplitterResizeEventArgs args)
    {

    }

    void OnCollapseDisabled(RadzenSplitterEventArgs args)
    {
        args.Cancel = true;

    }

    void OnResizeDisabled(RadzenSplitterResizeEventArgs args)
    {
        args.Cancel = true;

    }
}
