@page "/sql"
@using MudBlazor;
@inject IJSRuntime Js;
@using Radzen
@using Radzen.Blazor
@namespace allmylinks
@using allmylinks.Models;
@using Newtonsoft.Json
@inject NavigationManager UriHelper;

<div id="sql" class="hide">
<div id="activetable" class="hide"></div>

@if (!isLoading)
{
    @if (showCallAlert && files.ToArray().Length == 0)
    {
        <div id="infomsg" class="center">
            <MudAlert Severity="Severity.Success" ContentAlignment="HorizontalAlignment.Center" ShowCloseIcon="true" CloseIconClicked="(() => CloseMe(false))">Press the "Upload Database" button to the left and upload a .db file to access this page.<br><a href="https://github.com/MessiDaGod/Files/blob/main/main.db?raw=true" class="center">Database File</a></MudAlert>

            @if (showLeaveAlert == true)
            {
                <MudAlert Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Center" ShowCloseIcon="true" CloseIconClicked="(() => CloseMe(false))">Only .db files can be uploaded!</MudAlert>
            }
        </div>
    }

    <RadzenSplitter Orientation="Radzen.Orientation.Vertical" Collapse=@OnCollapseDisabled Expand=@OnExpand>
        <RadzenSplitterPane>
            <RadzenSplitter Collapse=@OnCollapseDisabled Expand=@OnExpand>
                <RadzenSplitterPane Size="12%" min-width="0">
                    <div id='infoPanel' class="card rounded-0 border-left-0">
                        <table class='table table-condensed small'>
                            <thead>
                                <tr>
                                    <td colspan='2'>
                                        <InputFile id="upload" OnChange="UploadFiles" hidden />
                                        <MudButton id="upload-btn" HtmlTag="label" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Filled.CloudUpload" for="upload">
                                            Upload Database
                                        </MudButton>
                                        @if (files != null)
                                        {
                                            @foreach (var file in files)
                                            {
                                                @if (file.Name.Contains(".db"))
                                                {
                                                    <MudList>
                                                        <MudListItem Icon="@Icons.Filled.AttachFile" @key="@file">
                                                            @file.Name <code>@(file.Size / 1000) KB</code>
                                                        </MudListItem>
                                                    </MudList>
                                                }
                                            }
                                        }
                                    </td>
                                </tr>
                            </thead>
                            <tbody id='dbTableDetails'></tbody>
                        </table>
                    </div>
                </RadzenSplitterPane>
                <RadzenSplitterPane>
                    <p id='errorDisplay' class='m-0 p-0 large text-danger'></p>
                    <div id='mainTabsWrapper' class='card rounded-0 border-right-0'>
                        <div id='mainTabs' role='tablist' class="hide">
                            <BrowseData />
                        </div>
                    </div>
                </RadzenSplitterPane>
            </RadzenSplitter>
        </RadzenSplitterPane>
    </RadzenSplitter>
}

</div>
<style>
    .hide {
        display: none !important;
    }
    #sql {
        padding-top: 60px;
    }
    .active {
        color: var(--mud-palette-secondary) !important;
    }
</style>


@code {

    public class DatabaseTables
    {
        public DatabaseTables() { }
        public object[] columns { get; set; } = null!;
        public object[] values { get; set; } = null!;
    }

    [Inject] IJSRuntime JS { get; set; }
    public IEnumerable<Person?>? Persons;
    public static string TableNameFromJS { get; set; } = string.Empty;
    public static string JSON { get; set; } = string.Empty;
    private bool showCallAlert = true;
    private bool showLeaveAlert = false;
    IEnumerable<SymbolField> symbols => SymbolField.Symbols;
    private SymbolField Conv { get; set; } = new();
    private bool AllowRowSelectOnRowClick { get; set; } = true;
    private IEnumerable<Prices> Prices { get; set; }
    private Radzen.TabPosition _tabPosition = Radzen.TabPosition.Left;
    private RadzenDataGrid<Prices> _PricesGrid;
    RadzenDataGrid<Prices> _grid;
    private RadzenDataGrid<Person>? PersonsGrid;

    public string[]? columns { get; set; }

    bool allowRowSelectOnRowClick = true;
    bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await Js.InvokeVoidAsync("AML.addColorListener");
        await base.OnInitializedAsync();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Run(() => isLoading = false);
            @* bool isSqlActive = false;
            isSqlActive = await JS.InvokeAsync<bool>("Sql.isSqlActive");
            if (isSqlActive) *@
            await Init();
            await InvokeAsync(StateHasChanged);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
    }

    public async Task<object[]?>? GetColumns(string tableName)
    {
        columns = await Js.InvokeAsync<string[]>("Sql.getColumns", tableName);
        for (int i = 0; i < columns.Length; i++)
        {
            await Task.Run(() => Console.WriteLine(columns[i].ToString())).ConfigureAwait(false);
        }
        return columns;
    }

    protected async Task Init()
    {
        await Js.InvokeVoidAsync("Sql.init");
    }

    [JSInvokable("SetTableName")]
    public static async Task SetTableName(string tableName)
    {
        TableNameFromJS = tableName;
    }

    [JSInvokable("GetJson")]
    public static string GetJson(string json)
    {
       JSON = json;
       return JSON;
    }

    public async Task LoadTables(string json)
    {
        if (TableNameFromJS == "Prices")
        {
            Prices[]? prices = JsonConvert.DeserializeObject<Prices[]>(json);
            for (int j = 0; j < prices.Length; j++)
                {
                    await LogIt(prices[j].Close.ToString());
                }
            return;
        }
    }

    public async Task LogIt(string message)
    {
        await Js.InvokeAsync<string>("AML.logit", message);
    }


    protected async Task InitRunQuery()
    {
        await Js.InvokeVoidAsync("Sql.initRunQuery");
    }

    IList<IBrowserFile> files = new List<IBrowserFile>();

    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        if (!e.GetMultipleFiles()[0].Name.ToString().ToLower().Contains(".db"))
        {
            await Js.InvokeVoidAsync("AML.logit", "File is not a valid SQLite database");
            showLeaveAlert = true;
            await InvokeAsync(StateHasChanged);
            return;
        }
        for (int i = 0; i < e.GetMultipleFiles().Count; i++)
        {
            var file = e.GetMultipleFiles()[i];
            await Js.InvokeVoidAsync("AML.logit", $"Adding file {i + 1}");
            await Task.Run(() => files.Add(file));
            await Js.InvokeVoidAsync("AML.logit", files[0].Name.ToString());
        }
        await Js.InvokeVoidAsync("Sql.toggleTabs");
        await Js.InvokeVoidAsync("Sql.toggleMsg");
        await Init();
        var result = await Js.InvokeAsync<Prices[]>("Sql.getPrices");
        List<Prices> pricesList = new();
        if (result != null)
        {
            for (int i = 0; i < result.Length; i++)
            {
                if (i >=0 && i < 11)
                await Js.InvokeVoidAsync("AML.logit", $"sql blazor loading row {i}");
                pricesList.Add(result[i]);
            }
            Prices = pricesList.AsEnumerable();
            await InvokeAsync(StateHasChanged);
        }
    }


    private void CloseMe(bool value)
    {
        if (value)
        {
            showLeaveAlert = false;
        }
        else
        {
            showCallAlert = false;
        }
    }

    private void ShowAlerts()
    {
        showCallAlert = true;
        showLeaveAlert = true;
    }

    void OnCollapse(RadzenSplitterEventArgs args)
    {
    }

    void OnExpand(RadzenSplitterEventArgs args)
    {
    }

    void OnResize(RadzenSplitterResizeEventArgs args)
    {

    }

    void OnCollapseDisabled(RadzenSplitterEventArgs args)
    {
        //args.Cancel = true;

    }

    void OnResizeDisabled(RadzenSplitterResizeEventArgs args)
    {
        //args.Cancel = true;

    }

}