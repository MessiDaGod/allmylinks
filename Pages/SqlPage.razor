@page "/SqlPage"
@inject IJSRuntime Js;
@using MudBlazor;
@namespace allmylinks



@if (!isLoading)
{
	@if (showCallAlert && files.ToArray().Length == 0)
	{
		<div id="infomsg">
		<MudAlert Severity="Severity.Success" ContentAlignment="HorizontalAlignment.Center" ShowCloseIcon="true" CloseIconClicked="(() => CloseMe(false))">Press the "Upload Database" button to the left and upload a .db file to access this page.</MudAlert>
		</div>
	}
	<div class='container-fluid'>
	<div class='row'>
		<div class='col-sm-4 pr-0'>
			<div id='infoPanel' class="card rounded-0 border-left-0">
				<table class='table table-condensed small'>
					<thead>
						<tr>
							<td colspan='2'>
								<InputFile id="upload" OnChange="UploadFiles" hidden />
								<MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Filled.CloudUpload" for="upload">
									Upload Database
								</MudButton>
								@if (files != null)
									{
										<MudText Typo="@Typo.h6">@files.Count() File@(files.Count() == 1 ? "" : "s"):</MudText>
										<MudList>
											@foreach (var file in files)
											{
												<MudListItem Icon="@Icons.Filled.AttachFile" @key="@file">
													@file.Name <code>@(file.Size / 1000) KB</code>
												</MudListItem>
											}
										</MudList>
									}
								</td>
							</tr>
						</thead>
						<tbody id='dbTableDetails'></tbody>
					</table>
				</div>
		    <span class='text-muted'>© Copyright <span id='copyrightYearDisplay'></span> by <a href='https://github.com/MessiDaGod/' target='_blank'>Joe Shakely</a> </span>
			</div>
			<div class='col-sm-8 pl-0'>
				<p id='errorDisplay' class='m-0 p-0 small text-danger'></p>
				<div id='mainTabsWrapper' class='card rounded-0 border-right-0'>
					<div id='mainTabs' role='tablist'>
						<MudTabs Elevation="4" Rounded="true" Centered="false" Color="@Color.Secondary" class='nav nav-tabs'>
							<MudTabPanel Text="🔎 Browse Data">
								<div id='browse' role='tabpanel' class='tab-pane fade active show' aria-labelledby='browse-tab'>
									<div class='btn-group btn-group-sm m-0'>
										<div class='btn-group btn-group-sm'>
											<button id='exportToggleBtn' type='button' class='btn btn-sm btn-light text-info border-info dropdown-toggle rounded-0' data-toggle='dropdown' onclick="Sql.">Save
												<span class="material-symbols-outlined">save</span></button>
											<div class='dropdown-menu'>
												<button id='exportAsJSON' type='button' class='dropdown-item'><small>💽 Export datatable as JSON</small></button>
											</div>
										</div>
										<small id='tableDetails' class='ml-2'></small>
									</div>
									<hr class='invisible-divider'>
									<div id='tableRecords' class='table-responsive'></div>
									<hr class='invisible-divider'>
									<ul id='tablePagination' class='pagination pagination-sm rounded-0'></ul>
								</div>
							</MudTabPanel>
							<MudTabPanel Text="❮⁄❯ Query Editor">
								<div id='editor' role='tabpanel' class='tab-pane fade show' aria-labelledby='editor-tab'>
									<div class='btn-group btn-group-sm m-0'>
										<div class='btn-group btn-group-sm'>
											<button id='exportQueryToggleBtn' type='button' class='btn btn-sm btn-light text-info border-info dropdown-toggle rounded-0' data-toggle='dropdown'>Save
												<span class="material-symbols-outlined">save</span></button>
											<div class='dropdown-menu'>
												<button id='exportQueryAsJSON' type='button' class='dropdown-item'><small>💽 Export resultset as JSON</small></button>
												<button id='exportEditorQuery' type='button' class='dropdown-item'><small>📄 Export SQL query to local file</small></button>
											</div>
										</div>
										<button id='runQueryBtn' type='button' class='btn btn-sm btn-light text-primary border-primary rounded-0 ml-2'>Execute Query
											<span class="material-symbols-outlined">database</span></button>
										<small id='tableQueryDetails' class='ml-2'></small>
									</div>
									<hr class='invisible-divider'>
									<p class='mb-0'><textarea id='lineCounter' wrap='off' readonly>1.</textarea><textarea id='codeEditor' wrap='off'></textarea></p>
									<div id='tableQueryRecords' class='table-responsive'></div>
									<hr class='invisible-divider'>
									<ul id='tableQueryPagination' class='pagination pagination-sm rounded-0'></ul>
								</div>
							</MudTabPanel>
							<MudTabPanel Text="📝 Output Logs">
								<div id='logs' role='tabpanel' class='tab-pane fade show' aria-labelledby='logs-tab'>
									<hr class='invisible-divider'>
									<div id='logsRecords' class='table-responsive'></div>
								</div>
							</MudTabPanel>
						</MudTabs>
					</div>
				</div>
			</div>
		</div>
	</div>
}
@code {

	bool isLoading = false;
	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
	}
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await Task.Run(() => isLoading = false);
			await Js.InvokeVoidAsync("AML.logit", "Initializing Sql.js");
			await Init();
			await Js.InvokeVoidAsync("Sql.toggleTabs");
			await InvokeAsync(StateHasChanged);
		}
	}


	protected async Task Init()
	{
		await Js.InvokeVoidAsync("Sql.init");
	}

	IList<IBrowserFile> files = new List<IBrowserFile>();
	private async Task UploadFiles(InputFileChangeEventArgs e)
	{
		if (!files[0].Name.ToString().Contains(".db")) {
			await Js.InvokeVoidAsync("AML.logit", "File is not a valid SQLite database");
			return;
		}

		for (int i = 0; i < e.GetMultipleFiles().Count; i++)
		{
			var file = e.GetMultipleFiles()[i];
			await Js.InvokeVoidAsync("AML.logit", $"Adding file {i + 1}");
			await Task.Run(() => files.Add(file));
		}

		await Js.InvokeVoidAsync("Sql.toggleTabs");
		await Js.InvokeVoidAsync("Sql.toggleMsg");
		await Init();
	}

    private bool showCallAlert = true;
    private bool showLeaveAlert = true;

    private void CloseMe(bool value)
    {
        if (value)
        {
            showLeaveAlert = false;
        }
        else
        {
            showCallAlert = false;
        }
    }

    private void ShowAlerts()
    {
        showCallAlert = true;
        showLeaveAlert = true;
    }
}