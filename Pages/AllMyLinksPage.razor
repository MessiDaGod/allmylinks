@page "/"
@inject IJSRuntime JS;
@inject PersonServices Service;

<PageTitle>@@joeshakely | GitHub.io</PageTitle>

<div class="sc-bdfBwQ sc-gsTCUz jgGrsq bhdLno"><div class="sc-bdfBwQ eZNKTD"><img src="me.png" alt="@@joeshakely Profile Image | Linktree" data-testid="ProfileImage"
class="sc-iBPRYJ flTywP Header__StyledProfilePicture-sc-i98650-2" filter="none"></div><div class="sc-bdfBwQ Header__Grid-sc-i98650-0 llgrqs jvyDlw"><h1 id="profile-joeshakely" class="sc-dlfnbm Header__GridHeading-sc-i98650-1 dxNTBA eiGOpF">@@joeshakely</h1></div></div>


<div class="sc-bdfBwQ LyLIy">
@for (var i = 0; i < Links.Length; i++) {
    <div id="links-@i" class="sc-bdfBwQ pkAuV">
        <div data-testid="StyledContainer" class="sc-bdfBwQ StyledContainer__StyledLinkContainer-sc-1kae6sc-0 hBNyQA doOGeq">
            <a href="@Links[i]" target="_blank" rel="noopener" data-testid="LinkButton"
               aria-describedby="profile-links-@i" height="auto" class="@CssClass">
                <p class="">@DomainFromUrl(Links[i]).Replace(".com", "").Replace("www.", "") </p>
            </a>
        </div>
    </div>
    }
    <div id="links-@Links.Length + 1" class="sc-bdfBwQ pkAuV">
        <div data-testid="StyledContainer" class="sc-bdfBwQ StyledContainer__StyledLinkContainer-sc-1kae6sc-0 hBNyQA doOGeq">
            <a data-testid="LinkButton"
               aria-describedby="profile-links-@Links.Length + 1" height="auto" class="@CssClass">
                <button id="PricesButton" class="mouse" onclick="AllMyLinks.plot()">Show Prices BTC-USD</button>
            </a>
        </div>
    </div>
</div>

<div data-testid="SignupCta" class="sc-bdfBwQ sc-gsTCUz eebIWD bhdLno">
    <div id="cancel" class="sc-bdfBwQ sc-gsTCUz SignupCta__AnimatedPill-sc-1831vut-0 fjeJqU bhdLno bFYATv">
        <button type="button" height="100%" class="sc-pFZIQ cqNGIV">
            <div class="sc-bdfBwQ sc-gsTCUz dOtDFk bhdLno">
                <svg xmlns="http://www.w3.org/2000/svg"
                     viewBox="0 0 24 25" height="16px" aria-labelledby="title desc"
                     style="display: block; width: auto;">
                    <title>Linktree Logo</title><desc>Linktree Logo Symbol</desc><path d="M13.5108 5.85343L17.5158 1.73642L19.8404 4.11701L15.6393 8.12199H21.5488V11.4268H15.6113L19.8404 15.5345L17.5158 17.8684L11.7744 12.099L6.03299 17.8684L3.70842 15.5438L7.93745 11.4361H2V8.12199H7.90944L3.70842 4.11701L6.03299 1.73642L10.038 5.85343V0H13.5108V5.85343ZM10.038 16.16H13.5108V24.0019H10.038V16.16Z" fill="#FFFFFF"></path>
                </svg>
            <div class="sc-bdfBwQ ghpmkC">

                <a class="sc-hKgILt izSXmz" href="https://linktr.ee/" target="_blank">linktr.ee/YourNameHere</a>
            </div>
            </div>
            </button><button class="sc-pFZIQ hKHFyd" style="color: white" @onclick="(async() => await ToggleCancel())">X</button>
    </div>
</div>

@code {

    private static string CssClass => "sc-pFZIQ StyledButton-sc-686c3k-0 ldGKnQ imjgnX";

    private static string[] Links => new[] { "https://github.com/messidagod", "https://instagram.com/joeshakely", "https://www.tiktok.com/@joeshakely" };

    private Lazy<Task<IJSObjectReference>>? _moduleTask { get; set; }
    private static string DomainFromUrl(string uri)
    {
        Uri myUri = new Uri(uri);
        return myUri.Host;
    }

    private async Task<string> ToggleCancel()
    {
        await JS.InvokeVoidAsync("AllMyLinks.logit", "ToggleCancel starting...");
        await JS.InvokeVoidAsync("AllMyLinks.toggleCancel");
        await InvokeAsync(StateHasChanged);
        await JS.InvokeVoidAsync("AllMyLinks.logit", "ToggleCancel done.");
        string result = string.Empty;
        try
        {
            result = await Service.InitAsync();
        }
        catch (Exception e)
        {
            await JS.InvokeVoidAsync("AllMyLinks.logit", e.Message);
            await JS.InvokeVoidAsync("AllMyLinks.logit", result);
            if (e.InnerException is not null && e.InnerException.Message is not null)
                await JS.InvokeVoidAsync("AllMyLinks.logit", e.InnerException.Message);
        }
        return "finished...";
    }
}

        @* await JS.InvokeVoidAsync("AllMyLinks.mountAndInitializeDb"); *@